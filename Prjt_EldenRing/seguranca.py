import streamlit as st
import sqlite3
from db_seguranca import criar_tabela_usuarios, autenticar_usuario, cadastrar_usuario

# --- CR√çTICO: POR FAVOR, implemente hashing de senhas em db_seguranca.py ---
# A seguran√ßa do seu app depende disso!

# === Inicializa a tabela de usu√°rios ===
# Esta fun√ß√£o cria a tabela se ela n√£o existir.
# √â uma boa pr√°tica cham√°-la no in√≠cio.
criar_tabela_usuarios()

# --- Controle de autentica√ß√£o e estado da sess√£o ---
# Inicializa 'autenticado' na session_state se n√£o existir.
if 'autenticado' not in st.session_state:
    st.session_state['autenticado'] = False
# Inicializa 'usuario' na session_state se n√£o existir.
if 'usuario' not in st.session_state:
    st.session_state['usuario'] = None

# --- Interface ---
st.title("üîê Acesso ao Sistema")

# Se o usu√°rio n√£o est√° autenticado, mostra as op√ß√µes de Login/Cadastro
if not st.session_state['autenticado']:
    opcao = st.radio("Escolha uma op√ß√£o:", ["Login", "Cadastre-se"], horizontal=True)

    if opcao == "Login":
        st.subheader("üö™ Login")
        usuario_input = st.text_input("Usu√°rio")
        senha_input = st.text_input("Senha", type="password")

        if st.button("Entrar"):
            # A fun√ß√£o autenticar_usuario agora retorna o nome do usu√°rio ou None
            usuario_autenticado = autenticar_usuario(usuario_input, senha_input)
            if usuario_autenticado:
                st.session_state['autenticado'] = True
                st.session_state['usuario'] = usuario_autenticado
                st.success(f"Bem-vindo(a), {usuario_autenticado}!")
                st.rerun() # Redireciona/recarrega a p√°gina para refletir o login
            else:
                st.error("Usu√°rio ou senha inv√°lidos.")

    elif opcao == "Cadastre-se":
        st.subheader("üìù Cadastre-se")
        novo_nome_completo = st.text_input("Nome completo")
        novo_usuario_input = st.text_input("Nome de usu√°rio (√∫nico)")
        nova_senha_input = st.text_input("Senha", type="password")
        confirmar_senha_input = st.text_input("Confirme a Senha", type="password")


        if st.button("Cadastrar"):
            if not novo_nome_completo or not novo_usuario_input or not nova_senha_input or not confirmar_senha_input:
                st.warning("Por favor, preencha todos os campos para cadastro.")
            elif nova_senha_input != confirmar_senha_input:
                st.error("As senhas n√£o coincidem. Por favor, tente novamente.")
            else:
                # 'cadastrar_usuario' agora retorna (True/False, mensagem)
                sucesso_cadastro, msg_cadastro = cadastrar_usuario(novo_nome_completo, novo_usuario_input, nova_senha_input)
                if sucesso_cadastro:
                    st.success(f"Cadastro realizado com sucesso! Agora voc√™ pode fazer login com o usu√°rio '{novo_usuario_input}'.")
                    # Opcional: limpar campos ap√≥s o cadastro
                    # (requer um pouco mais de l√≥gica com Streamlit, ou confiar no rerun)
                else:
                    st.error(f"Erro ao cadastrar: {msg_cadastro}") # Usa a mensagem de erro do db_seguranca
else:
    # --- Conte√∫do do aplicativo principal AP√ìS o login ---
    st.sidebar.success(f"Logado como: {st.session_state['usuario']}")
    st.write(f"Ol√°, {st.session_state['usuario']}! Este √© o seu painel principal.")
    st.write("Aqui voc√™ pode adicionar o conte√∫do do seu aplicativo Elden Ring.")

    # Bot√£o de Logout
    if st.sidebar.button("Sair"):
        st.session_state['autenticado'] = False
        st.session_state['usuario'] = None
        st.success("Voc√™ saiu do sistema.")
        st.rerun() # Recarrega a p√°gina para voltar √† tela de login